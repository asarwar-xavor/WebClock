//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoreServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StoreServiceReference.RetrieveNameSoap")]
    public interface RetrieveNameSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getWFSetting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getWFSettingAsync(string keys, string vals);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmpGenInfoRankerReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getEmpGenInfoRankerReportAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/whoAmIByEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmIByEmpIDAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isLocRetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> isLocRetailAsync(int locID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmpGenInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getEmpGenInfoAsync(int empID, int callerEmpID, int callerLocID, string callerJobCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/whoAmI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/whoAmI2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmI2Async(string s_empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TechnicianName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.TechnicianNameResponseTechnicianNameResult> TechnicianNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/StoreManagerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.StoreManagerNameResponseStoreManagerNameResult> StoreManagerNameAsync(string cat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDMForStore", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.GetDMForStoreResponseGetDMForStoreResult> GetDMForStoreAsync(string StoreID, string SMJobCode, string OMJobCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmailFromEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getEmailFromEmpIDResponseGetEmailFromEmpIDResult> getEmailFromEmpIDAsync(string s_empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmpDetailsFromDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getEmpDetailsFromDBResponseGetEmpDetailsFromDBResult> getEmpDetailsFromDBAsync(string empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getLocationIdByLocationType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string[]> getLocationIdByLocationTypeAsync(StoreServiceReference.LocationType LocationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmpIdByAccountName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetEmpIdByAccountNameAsync(string accountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmpIdStoreIdByJobCodeandLocationType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getEmpIdStoreIdByJobCodeandLocationTypeResponseGetEmpIdStoreIdByJobCodeandLocationTypeResult> getEmpIdStoreIdByJobCodeandLocationTypeAsync(string Location, string JobCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getMultipleSAMfromMultipleEmpID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getMultipleSAMfromMultipleEmpIDResponseGetMultipleSAMfromMultipleEmpIDResult> getMultipleSAMfromMultipleEmpIDAsync(string empID, string strDomNetBIOS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetEmpIdsByJobCodeandEmpId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.GetEmpIdsByJobCodeandEmpIdResponseGetEmpIdsByJobCodeandEmpIdResult> GetEmpIdsByJobCodeandEmpIdAsync(string EmpId, string JobCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getEmployeeSupervisorLoginFromMultipleDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getEmployeeSupervisorLoginFromMultipleDomainResponseGetEmployeeSupervisorLoginFromMultipleDomainResult> getEmployeeSupervisorLoginFromMultipleDomainAsync(string EmpID, string strDomNetBIOS);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllStores", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getAllStoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getStoreInfoByStoreId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getStoreInfoByStoreIdAsync(string StoreId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllStates", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getAllStatesResponseGetAllStatesResult> getAllStatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getLocByState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.getLocByStateResponseGetLocByStateResult> getLocByStateAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getAllLocations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getAllLocationsAsync(string isPhysical);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class TechnicianNameResponseTechnicianNameResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class StoreManagerNameResponseStoreManagerNameResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class GetDMForStoreResponseGetDMForStoreResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getEmailFromEmpIDResponseGetEmailFromEmpIDResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getEmpDetailsFromDBResponseGetEmpDetailsFromDBResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum LocationType
    {
        
        /// <remarks/>
        Legacy,
        
        /// <remarks/>
        Phase3,
        
        /// <remarks/>
        UnionLegacy,
        
        /// <remarks/>
        UnionPhase3,
        
        /// <remarks/>
        Undefined,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getEmpIdStoreIdByJobCodeandLocationTypeResponseGetEmpIdStoreIdByJobCodeandLocationTypeResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getMultipleSAMfromMultipleEmpIDResponseGetMultipleSAMfromMultipleEmpIDResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class GetEmpIdsByJobCodeandEmpIdResponseGetEmpIdsByJobCodeandEmpIdResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getEmployeeSupervisorLoginFromMultipleDomainResponseGetEmployeeSupervisorLoginFromMultipleDomainResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getAllStatesResponseGetAllStatesResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tempuri.org/")]
    public partial class getLocByStateResponseGetLocByStateResult
    {
        
        private System.Xml.Linq.XElement[] anyField;
        
        private System.Xml.Linq.XElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.Linq.XElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.Linq.XElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public interface RetrieveNameSoapChannel : StoreServiceReference.RetrieveNameSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class RetrieveNameSoapClient : System.ServiceModel.ClientBase<StoreServiceReference.RetrieveNameSoap>, StoreServiceReference.RetrieveNameSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public RetrieveNameSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(RetrieveNameSoapClient.GetBindingForEndpoint(endpointConfiguration), RetrieveNameSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RetrieveNameSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(RetrieveNameSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RetrieveNameSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(RetrieveNameSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public RetrieveNameSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getWFSettingAsync(string keys, string vals)
        {
            return base.Channel.getWFSettingAsync(keys, vals);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getEmpGenInfoRankerReportAsync(int empID)
        {
            return base.Channel.getEmpGenInfoRankerReportAsync(empID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmIByEmpIDAsync(int empID)
        {
            return base.Channel.whoAmIByEmpIDAsync(empID);
        }
        
        public System.Threading.Tasks.Task<bool> isLocRetailAsync(int locID)
        {
            return base.Channel.isLocRetailAsync(locID);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getEmpGenInfoAsync(int empID, int callerEmpID, int callerLocID, string callerJobCode)
        {
            return base.Channel.getEmpGenInfoAsync(empID, callerEmpID, callerLocID, callerJobCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmIAsync()
        {
            return base.Channel.whoAmIAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> whoAmI2Async(string s_empID)
        {
            return base.Channel.whoAmI2Async(s_empID);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.TechnicianNameResponseTechnicianNameResult> TechnicianNameAsync()
        {
            return base.Channel.TechnicianNameAsync();
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.StoreManagerNameResponseStoreManagerNameResult> StoreManagerNameAsync(string cat)
        {
            return base.Channel.StoreManagerNameAsync(cat);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.GetDMForStoreResponseGetDMForStoreResult> GetDMForStoreAsync(string StoreID, string SMJobCode, string OMJobCode)
        {
            return base.Channel.GetDMForStoreAsync(StoreID, SMJobCode, OMJobCode);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getEmailFromEmpIDResponseGetEmailFromEmpIDResult> getEmailFromEmpIDAsync(string s_empID)
        {
            return base.Channel.getEmailFromEmpIDAsync(s_empID);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getEmpDetailsFromDBResponseGetEmpDetailsFromDBResult> getEmpDetailsFromDBAsync(string empID)
        {
            return base.Channel.getEmpDetailsFromDBAsync(empID);
        }
        
        public System.Threading.Tasks.Task<string[]> getLocationIdByLocationTypeAsync(StoreServiceReference.LocationType LocationType)
        {
            return base.Channel.getLocationIdByLocationTypeAsync(LocationType);
        }
        
        public System.Threading.Tasks.Task<string> GetEmpIdByAccountNameAsync(string accountName)
        {
            return base.Channel.GetEmpIdByAccountNameAsync(accountName);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getEmpIdStoreIdByJobCodeandLocationTypeResponseGetEmpIdStoreIdByJobCodeandLocationTypeResult> getEmpIdStoreIdByJobCodeandLocationTypeAsync(string Location, string JobCode)
        {
            return base.Channel.getEmpIdStoreIdByJobCodeandLocationTypeAsync(Location, JobCode);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getMultipleSAMfromMultipleEmpIDResponseGetMultipleSAMfromMultipleEmpIDResult> getMultipleSAMfromMultipleEmpIDAsync(string empID, string strDomNetBIOS)
        {
            return base.Channel.getMultipleSAMfromMultipleEmpIDAsync(empID, strDomNetBIOS);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.GetEmpIdsByJobCodeandEmpIdResponseGetEmpIdsByJobCodeandEmpIdResult> GetEmpIdsByJobCodeandEmpIdAsync(string EmpId, string JobCode)
        {
            return base.Channel.GetEmpIdsByJobCodeandEmpIdAsync(EmpId, JobCode);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getEmployeeSupervisorLoginFromMultipleDomainResponseGetEmployeeSupervisorLoginFromMultipleDomainResult> getEmployeeSupervisorLoginFromMultipleDomainAsync(string EmpID, string strDomNetBIOS)
        {
            return base.Channel.getEmployeeSupervisorLoginFromMultipleDomainAsync(EmpID, strDomNetBIOS);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getAllStoresAsync()
        {
            return base.Channel.getAllStoresAsync();
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getStoreInfoByStoreIdAsync(string StoreId)
        {
            return base.Channel.getStoreInfoByStoreIdAsync(StoreId);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getAllStatesResponseGetAllStatesResult> getAllStatesAsync()
        {
            return base.Channel.getAllStatesAsync();
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.getLocByStateResponseGetLocByStateResult> getLocByStateAsync(string state)
        {
            return base.Channel.getLocByStateAsync(state);
        }
        
        public System.Threading.Tasks.Task<StoreServiceReference.ArrayOfXElement> getAllLocationsAsync(string isPhysical)
        {
            return base.Channel.getAllLocationsAsync(isPhysical);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RetrieveNameSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.RetrieveNameSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.RetrieveNameSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://storeinfodev.gcnation.com/Service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.RetrieveNameSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://storeinfodev.gcnation.com/Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            RetrieveNameSoap,
            
            RetrieveNameSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
